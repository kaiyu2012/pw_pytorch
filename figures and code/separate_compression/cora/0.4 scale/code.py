from matplotlib import pyplot as plt
import numpy as np
def calculate(array_list):
    min_list = []
    max_list = []
    avg_list = []
    # 1000
    for i in range(len(array_list[0])):

        # 5
        list = []
        for j in range(len(array_list)):
            list.append(array_list[j][i])

        minimum = min(list)
        maximum = max(list)
        average = sum(list) / len(list)

        min_list.append(minimum)
        max_list.append(maximum)
        avg_list.append(average)
    return avg_list, min_list, max_list

ratios = [0.4, 0.8, 1.2, 1.6, 2.0]
top_k_singleshot = {'number_of_runs': 3, 'adj_compressions': [0.4, 0.8, 1.2, 1.6, 2.0], 'weight_compressions': [0.4, 0.8, 1.2, 1.6, 2.0], 'run_0': {'top_k_gradient_score': [[[0.662, 0.658, 0.636, 0.59, 0.518], [0.63, 0.622, 0.588, 0.522, 0.442], [0.628, 0.588, 0.57, 0.52, 0.478], [0.532, 0.498, 0.48, 0.414, 0.366], [0.53, 0.554, 0.538, 0.502, 0.398]]]}, 'run_1': {'top_k_gradient_score': [[[0.67, 0.658, 0.62, 0.582, 0.512], [0.634, 0.64, 0.59, 0.556, 0.396], [0.592, 0.622, 0.606, 0.518, 0.442], [0.534, 0.548, 0.512, 0.496, 0.426], [0.568, 0.57, 0.566, 0.554, 0.496]]]}, 'run_2': {'top_k_gradient_score': [[[0.698, 0.706, 0.676, 0.644, 0.606], [0.668, 0.68, 0.656, 0.614, 0.572], [0.622, 0.634, 0.622, 0.588, 0.524], [0.588, 0.592, 0.586, 0.556, 0.498], [0.578, 0.582, 0.57, 0.55, 0.526]]]}}
top_k_multishot = {'number_of_runs': 3, 'run_0': {'top_k_gradient_score': [{'level_1': [0.686, 0.6920000000000001, 0.6900000000000001, 0.676, 0.62, 0.674, 0.674, 0.666, 0.654, 0.5720000000000001, 0.62, 0.626, 0.656, 0.616, 0.582, 0.612, 0.628, 0.608, 0.584, 0.55, 0.634, 0.638, 0.638, 0.602, 0.5700000000000001], 'level_2': [0.706, 0.712, 0.7000000000000001, 0.6920000000000001, 0.62, 0.676, 0.664, 0.676, 0.65, 0.622, 0.634, 0.644, 0.656, 0.628, 0.5760000000000001, 0.63, 0.618, 0.632, 0.602, 0.558, 0.642, 0.63, 0.658, 0.598, 0.5760000000000001], 'level_3': [0.71, 0.706, 0.71, 0.6940000000000001, 0.624, 0.678, 0.666, 0.674, 0.652, 0.598, 0.64, 0.638, 0.666, 0.644, 0.594, 0.612, 0.632, 0.632, 0.592, 0.5640000000000001, 0.64, 0.63, 0.652, 0.614, 0.5660000000000001]}]}, 'run_1': {'top_k_gradient_score': [{'level_1': [0.704, 0.6980000000000001, 0.6880000000000001, 0.6940000000000001, 0.628, 0.672, 0.7000000000000001, 0.68, 0.632, 0.584, 0.656, 0.68, 0.662, 0.618, 0.56, 0.656, 0.658, 0.656, 0.604, 0.5700000000000001, 0.656, 0.648, 0.648, 0.616, 0.5720000000000001], 'level_2': [0.704, 0.71, 0.6900000000000001, 0.7000000000000001, 0.634, 0.666, 0.668, 0.666, 0.642, 0.58, 0.676, 0.664, 0.67, 0.618, 0.596, 0.648, 0.654, 0.636, 0.614, 0.5760000000000001, 0.644, 0.636, 0.64, 0.6, 0.5680000000000001], 'level_3': [0.6980000000000001, 0.706, 0.714, 0.72, 0.644, 0.674, 0.66, 0.666, 0.636, 0.596, 0.664, 0.666, 0.664, 0.644, 0.592, 0.638, 0.648, 0.64, 0.62, 0.588, 0.626, 0.644, 0.644, 0.618, 0.592]}]}, 'run_2': {'top_k_gradient_score': [{'level_1': [0.7020000000000001, 0.706, 0.722, 0.676, 0.616, 0.6880000000000001, 0.678, 0.684, 0.63, 0.5740000000000001, 0.66, 0.656, 0.666, 0.62, 0.538, 0.64, 0.642, 0.632, 0.608, 0.52, 0.634, 0.636, 0.654, 0.602, 0.5740000000000001], 'level_2': [0.712, 0.708, 0.718, 0.686, 0.628, 0.666, 0.682, 0.6980000000000001, 0.65, 0.578, 0.668, 0.666, 0.684, 0.642, 0.554, 0.632, 0.64, 0.652, 0.62, 0.56, 0.626, 0.638, 0.646, 0.606, 0.56], 'level_3': [0.7020000000000001, 0.718, 0.728, 0.6900000000000001, 0.642, 0.678, 0.686, 0.6940000000000001, 0.652, 0.616, 0.654, 0.664, 0.674, 0.642, 0.552, 0.618, 0.646, 0.654, 0.63, 0.5700000000000001, 0.636, 0.654, 0.656, 0.626, 0.588]}]}}
synflow_singleshot = {'number_of_runs': 3, 'adj_compressions': [0.4, 0.8, 1.2, 1.6, 2.0], 'weight_compressions': [0.4, 0.8, 1.2, 1.6, 2.0], 'run_0': {'synflow': [[[0.668, 0.658, 0.594, 0.586, 0.458], [0.616, 0.6, 0.568, 0.504, 0.48], [0.572, 0.562, 0.51, 0.486, 0.464], [0.578, 0.576, 0.56, 0.49, 0.466], [0.606, 0.596, 0.562, 0.514, 0.47]]]}, 'run_1': {'synflow': [[[0.66, 0.654, 0.644, 0.602, 0.52], [0.674, 0.656, 0.656, 0.592, 0.544], [0.646, 0.596, 0.578, 0.488, 0.438], [0.502, 0.564, 0.508, 0.422, 0.322], [0.532, 0.498, 0.446, 0.4, 0.278]]]}, 'run_2': {'synflow': [[[0.682, 0.692, 0.644, 0.618, 0.514], [0.656, 0.632, 0.606, 0.504, 0.466], [0.628, 0.608, 0.56, 0.48, 0.356], [0.594, 0.594, 0.552, 0.546, 0.494], [0.59, 0.602, 0.596, 0.538, 0.486]]]}}
synflow_multishot = {'number_of_runs': 3, 'run_0': {'synflow': [{'level_1': [0.7020000000000001, 0.68, 0.716, 0.6880000000000001, 0.542, 0.6900000000000001, 0.66, 0.678, 0.656, 0.488, 0.658, 0.66, 0.648, 0.61, 0.44, 0.654, 0.676, 0.62, 0.602, 0.462, 0.65, 0.65, 0.664, 0.544, 0.578], 'level_2': [0.6920000000000001, 0.704, 0.714, 0.668, 0.596, 0.6880000000000001, 0.666, 0.672, 0.642, 0.5660000000000001, 0.652, 0.654, 0.638, 0.648, 0.512, 0.638, 0.654, 0.638, 0.556, 0.554, 0.634, 0.618, 0.65, 0.534, 0.562], 'level_3': [0.718, 0.7000000000000001, 0.72, 0.714, 0.63, 0.664, 0.674, 0.646, 0.658, 0.614, 0.656, 0.64, 0.638, 0.626, 0.552, 0.632, 0.626, 0.612, 0.606, 0.53, 0.612, 0.636, 0.618, 0.614, 0.616]}]}, 'run_1': {'synflow': [{'level_1': [0.6960000000000001, 0.68, 0.704, 0.662, 0.586, 0.682, 0.678, 0.662, 0.626, 0.48, 0.666, 0.666, 0.644, 0.544, 0.482, 0.63, 0.648, 0.614, 0.532, 0.506, 0.67, 0.61, 0.632, 0.554, 0.448], 'level_2': [0.716, 0.71, 0.682, 0.668, 0.544, 0.67, 0.678, 0.672, 0.66, 0.584, 0.656, 0.664, 0.616, 0.596, 0.528, 0.65, 0.632, 0.634, 0.596, 0.492, 0.644, 0.638, 0.626, 0.612, 0.53], 'level_3': [0.708, 0.708, 0.7020000000000001, 0.686, 0.666, 0.67, 0.682, 0.642, 0.67, 0.584, 0.656, 0.672, 0.648, 0.592, 0.554, 0.638, 0.642, 0.636, 0.632, 0.542, 0.624, 0.638, 0.618, 0.594, 0.536]}]}, 'run_2': {'synflow': [{'level_1': [0.706, 0.71, 0.6980000000000001, 0.604, 0.586, 0.6960000000000001, 0.6900000000000001, 0.6940000000000001, 0.62, 0.518, 0.664, 0.65, 0.66, 0.618, 0.454, 0.648, 0.646, 0.634, 0.502, 0.424, 0.65, 0.644, 0.642, 0.61, 0.488], 'level_2': [0.712, 0.72, 0.6940000000000001, 0.662, 0.656, 0.6880000000000001, 0.668, 0.646, 0.64, 0.582, 0.66, 0.664, 0.62, 0.594, 0.56, 0.642, 0.648, 0.626, 0.588, 0.552, 0.638, 0.628, 0.626, 0.598, 0.56], 'level_3': [0.714, 0.6940000000000001, 0.706, 0.68, 0.662, 0.67, 0.652, 0.652, 0.63, 0.578, 0.652, 0.63, 0.626, 0.62, 0.588, 0.644, 0.634, 0.612, 0.596, 0.552, 0.618, 0.638, 0.62, 0.59, 0.554]}]}}
UGS = {'number_of_runs': 3, 'adj_compressions': [0.4, 0.8, 1.2, 1.6, 2.0], 'weight_compressions': [0.4, 0.8, 1.2, 1.6, 2.0], 'run_0': {'ugs': [[[0.482, 0.192, 0.164, 0.162, 0.156], [0.406, 0.17, 0.158, 0.158, 0.156], [0.378, 0.17, 0.158, 0.156, 0.156], [0.396, 0.168, 0.166, 0.158, 0.16], [0.456, 0.198, 0.174, 0.286, 0.158]]]}, 'run_1': {'ugs': [[[0.52, 0.254, 0.18, 0.316, 0.316], [0.428, 0.274, 0.264, 0.316, 0.316], [0.408, 0.292, 0.304, 0.316, 0.316], [0.428, 0.324, 0.304, 0.122, 0.316], [0.466, 0.32, 0.314, 0.122, 0.316]]]}, 'run_2': {'ugs': [[[0.39, 0.206, 0.144, 0.144, 0.14], [0.35, 0.226, 0.128, 0.126, 0.128], [0.404, 0.17, 0.134, 0.126, 0.156], [0.406, 0.292, 0.166, 0.158, 0.156], [0.466, 0.294, 0.172, 0.162, 0.162]]]}}
random = {'number_of_runs': 3, 'adj_compressions': [0.4, 0.8, 1.2, 1.6, 2.0], 'weight_compressions': [0.4, 0.8, 1.2, 1.6, 2.0], 'run_0': {'random': [[[0.54, 0.366, 0.202, 0.29, 0.316], [0.488, 0.216, 0.274, 0.162, 0.316], [0.434, 0.318, 0.34, 0.292, 0.316], [0.422, 0.342, 0.358, 0.316, 0.162], [0.49, 0.368, 0.334, 0.31, 0.316]]]}, 'run_1': {'random': [[[0.574, 0.402, 0.166, 0.276, 0.216], [0.432, 0.172, 0.162, 0.168, 0.162], [0.396, 0.286, 0.316, 0.298, 0.162], [0.372, 0.304, 0.184, 0.162, 0.162], [0.528, 0.372, 0.228, 0.172, 0.298]]]}, 'run_2': {'random': [[[0.456, 0.316, 0.246, 0.28, 0.316], [0.372, 0.26, 0.188, 0.156, 0.31], [0.37, 0.31, 0.322, 0.284, 0.286], [0.454, 0.334, 0.242, 0.326, 0.302], [0.426, 0.378, 0.19, 0.316, 0.316]]]}}

Adj_ratios = [0.4, 0.8, 1.2, 1.6, 2.0]
for i in range(len(Adj_ratios)):
  top_k_singleshot_data = []
  top_k_multishot_data = []
  synflow_singleshot_data = []
  synflow_multishot_data = []
  ugs_data = []
  random_data = []
  
  for run in range(3):
    top_k_singleshot_data.append(top_k_singleshot['run_' + str(run)]['top_k_gradient_score'][0][i])
    top_k_multishot_data.append(top_k_multishot['run_' + str(run)]['top_k_gradient_score'][0]['level_3'][5*i:5*(i+1)])
    synflow_singleshot_data.append(synflow_singleshot['run_' + str(run)]['synflow'][0][i])
    synflow_multishot_data.append(synflow_multishot['run_' + str(run)]['synflow'][0]['level_3'][5*i:5*(i+1)])
    ugs_data.append(UGS['run_' + str(run)]['ugs'][0][i])
    random_data.append(random['run_' + str(run)]['random'][0][i])
  

  top_k_singleshot_mean, top_k_singleshot_min, top_k_singleshot_max = calculate(top_k_singleshot_data)
  top_k_multishot_mean, top_k_multishot_min, top_k_multishot_max = calculate(top_k_multishot_data)
  synflow_singleshot_mean, synflow_singleshot_min, synflow_singleshot_max = calculate(synflow_singleshot_data)
  synflow_multishot_mean, synflow_multishot_min, synflow_multishot_max = calculate(synflow_multishot_data)
  ugs_mean, ugs_min, ugs_max = calculate(ugs_data)
  random_mean, random_min, random_max = calculate(random_data)

  plt.rc('font', family='serif', size=12)
  plt.rc('xtick', labelsize='medium')
  plt.rc('ytick', labelsize='medium')

  fig = plt.figure(figsize=(6, 6))

  ax = fig.add_subplot(1, 1, 1)
  ax.plot(ratios, top_k_multishot_mean, color='purple', ls='solid', linewidth = 0.5, marker = "*", label = "IGRP (Multiple Shot)")
  ax.plot(ratios, top_k_singleshot_mean, color='magenta', ls='solid', linewidth = 0.5, marker = "x", label = "IGRP (Single Shot)")
  ax.plot(ratios, synflow_multishot_mean, color='blue', ls='solid', linewidth = 0.5, marker = "^", label = "SF (Multiple Shot)")
  ax.plot(ratios, synflow_singleshot_mean, color='orange', ls='solid', linewidth = 0.5, marker = "v", label = "SF (Single Shot)")
  

  ax.plot(ratios, ugs_mean, color='red', ls='solid', linewidth = 0.5, marker = "s", label = "UGS")
  #ax.fill_between(ratios, ugs_min, ugs_max, facecolor='lightcoral', alpha=0.2)

  ax.plot(ratios, random_mean, color='green', ls='solid', linewidth = 0.5, marker = "o", label = "Random")
  #ax.fill_between(ratios, random_min, random_max, facecolor='lightgreen', alpha=0.2)
  ax.set_facecolor("whitesmoke")
  plt.grid(color = 'gray', linestyle = 'solid', linewidth = 0.5)
  dataset = 'Cora'
  title = 'Adjacency Compression Ratio = '+str(Adj_ratios[i])+' ('+dataset+')'
  ax.set_title(title)
  ax.set_xlabel('Weight Compression Ratio')
  ax.set_ylabel('Top-1 Accuracy')
  ax.set_yticks((0, 0.2, 0.4, 0.6, 0.8, 1))
  ax.set_xticks((0.4, 0.8, 1.2, 1.6, 2))
  plt.legend(loc = 1, prop={'size':10})
  plt.savefig('figure'+'_'+str(Adj_ratios[i])+ '.png')
  plt.show()
